{"version":3,"file":"preload.js","mappings":"mCAAAA,EAAOC,QAAUC,QAAQ,W,GCCrBC,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaL,QAGrB,IAAID,EAASG,EAAyBE,GAAY,CAGjDJ,QAAS,CAAC,GAOX,OAHAO,EAAoBH,GAAUL,EAAQA,EAAOC,QAASG,GAG/CJ,EAAOC,OACf,C,wECtBA,gBAIA,EAAAQ,cAAcC,kBAAkB,WAAY,CAC1CC,UAAW,CAACC,EAAqBC,EAAaC,IAC5C,EAAAC,YAAYC,OAAO,cAAeH,EAAKC,GACzCG,SAAU,IAAM,EAAAF,YAAYC,OAAO,aACnCD,YAAa,CACX,WAAAG,CAAYC,KAAsBC,GAChC,EAAAL,YAAYM,KAAKF,KAAYC,EAC/B,EACA,EAAAE,CAAGH,EAAmBI,GACpB,MAAMC,EAAe,CAACC,KAA6BL,IACjDG,KAAQH,GAGV,OAFA,EAAAL,YAAYO,GAAGH,EAASK,GAEjB,KACL,EAAAT,YAAYW,eAAeP,EAASK,EAAa,CAErD,EACA,IAAAG,CAAKR,EAAmBI,GACtB,EAAAR,YAAYY,KAAKR,GAAS,CAACM,KAAWL,IAASG,KAAQH,IACzD,I","sources":["webpack:///external node-commonjs \"electron\"","webpack:///webpack/bootstrap","webpack:///./src/main/preload.ts"],"sourcesContent":["module.exports = require(\"electron\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { contextBridge, ipcRenderer, IpcRendererEvent } from 'electron';\n\nexport type Channels = 'menu-command';\n\ncontextBridge.exposeInMainWorld('electron', {\n  onOffSign: (event: typeof event, key: string, value: string) =>\n    ipcRenderer.invoke('on-off-sign', key, value),\n  homePath: () => ipcRenderer.invoke('home-path'),\n  ipcRenderer: {\n    sendMessage(channel: Channels, ...args: unknown[]) {\n      ipcRenderer.send(channel, ...args);\n    },\n    on(channel: Channels, func: (...args: unknown[]) => void) {\n      const subscription = (_event: IpcRendererEvent, ...args: unknown[]) =>\n        func(...args);\n      ipcRenderer.on(channel, subscription);\n\n      return () => {\n        ipcRenderer.removeListener(channel, subscription);\n      };\n    },\n    once(channel: Channels, func: (...args: unknown[]) => void) {\n      ipcRenderer.once(channel, (_event, ...args) => func(...args));\n    },\n  },\n});\n"],"names":["module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","contextBridge","exposeInMainWorld","onOffSign","event","key","value","ipcRenderer","invoke","homePath","sendMessage","channel","args","send","on","func","subscription","_event","removeListener","once"],"sourceRoot":""}